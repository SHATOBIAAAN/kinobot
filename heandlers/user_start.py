from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup
from loader import dp, bot
from data.db import get_films, get_AllChennel, get_text, add_user
from config import admin_ids , API_KEY
import logging
import aiohttp
import random

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FilmStates(StatesGroup):
    waiting_for_code = State()
    selected_media_type = State()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'BACK_TO_SELECTION', state=FilmStates.selected_media_type)
async def process_back_to_selection(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    text_start = "*–ß—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ?*"
    keyboard = create_random_combined_keyboard()
    
    await bot.send_message(chat_id=callback_query.from_user.id, text=text_start, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â—ë"
@dp.callback_query_handler(lambda c: c.data == 'MORE', state=FilmStates.selected_media_type)
async def process_more_button(callback_query: types.CallbackQuery, state: FSMContext):
    media_type = await state.get_data()
    media_type = media_type.get('media_type', 'movie')  # Default to movie
    
    if media_type == 'movie':
        await process_random_movie(callback_query, state)
    elif media_type == 'series':
        await process_random_series(callback_query, state)
    elif media_type == 'anime':
        await process_random_anime(callback_query, state)

    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ RandomMovie
@dp.callback_query_handler(lambda c: c.data == 'BUTTON_1', state='*')
async def process_random_movie(callback_query: types.CallbackQuery, state: FSMContext):
    random_film = await get_random_film_from_tmdb()
    if random_film:
        try:
            film_name = random_film['title']
            film_year = random_film.get('release_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:4]
            poster_path = random_film.get('poster_path')
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            response_text = f"–§–∏–ª—å–º: {film_name}\n–ì–æ–¥: {film_year}"

            if poster_url:
                await bot.send_photo(callback_query.from_user.id, poster_url, caption=response_text, reply_markup=create_back_and_more_keyboard())
            else:
                await bot.send_message(callback_query.from_user.id, response_text, reply_markup=create_back_and_more_keyboard())

            await FilmStates.selected_media_type.set()
            await state.update_data(media_type='movie')

        except KeyError as e:
            response_text = f"–û—à–∏–±–∫–∞: –∫–ª—é—á {e} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞."
            await bot.send_message(callback_query.from_user.id, response_text)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º.")

    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª"
@dp.callback_query_handler(lambda c: c.data == 'BUTTON_2', state='*')
async def process_random_series(callback_query: types.CallbackQuery, state: FSMContext):
    random_series = await get_random_series_from_tmdb()
    if random_series:
        try:
            series_name = random_series['name']
            series_year = random_series.get('first_air_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:4]
            poster_path = random_series.get('poster_path')
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

            response_text = f"–°–µ—Ä–∏–∞–ª: {series_name}\n–ì–æ–¥: {series_year}"

            if poster_url:
                await bot.send_photo(callback_query.from_user.id, poster_url, caption=response_text, reply_markup=create_back_and_more_keyboard())
            else:
                await bot.send_message(callback_query.from_user.id, response_text, reply_markup=create_back_and_more_keyboard())

            await FilmStates.selected_media_type.set()
            await state.update_data(media_type='series')

        except KeyError as e:
            response_text = f"–û—à–∏–±–∫–∞: –∫–ª—é—á {e} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–∞."
            await bot.send_message(callback_query.from_user.id, response_text)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª.")

    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ RandomAnime


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–°–¥–µ–ª–∞–Ω–æ ‚úÖ"
async def sub_list():
    data_channel = await get_AllChennel()
    sub_list = InlineKeyboardMarkup(row_width=1)
    for i in data_channel:
        sub_list.add(InlineKeyboardButton(text=i[1], url=i[2]))
    sub_list.add(InlineKeyboardButton(text='–°–¥–µ–ª–∞–Ω–æ ‚úÖ', callback_data='done'))
    return sub_list

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –º–µ–¥–∏–∞
def create_random_combined_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='üé¨ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º', callback_data='BUTTON_1'))
    keyboard.add(InlineKeyboardButton(text='üì∫ –°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª', callback_data='BUTTON_2'))
    keyboard.add(InlineKeyboardButton(text='üéå –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ', callback_data='BUTTON_3'))
    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='BACK_TO_SELECTION'))
    return keyboard
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def edit_message_safe(callback_query: types.CallbackQuery, new_text: str, new_keyboard: InlineKeyboardMarkup):
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=new_text,
            reply_markup=new_keyboard,
            parse_mode=types.ParseMode.MARKDOWN
        )
    except types.MessageNotModified:
        logging.info("Message not modified: new content is the same as current.")
    except Exception as e:
        logging.error(f"Error editing message: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞




import aiohttp
import random
import logging

  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á API

# –ü—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–µ
proxy_user = 'wQAoWQ'
proxy_password = 'j64FcG'
proxy_url = f'http://{proxy_user}:{proxy_password}@185.239.136.147:8000'

async def get_random_film_from_tmdb():
    page = random.randint(1, 500)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    url = f'https://api.themoviedb.org/3/movie/popular?api_key={API_KEY}&page={page}'
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=proxy_url) as response:
            if response.status == 200:
                data = await response.json()
                if data['results']:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –±–µ–∑ –∂–∞–Ω—Ä–∞ "–ê–Ω–∏–º–∞—Ü–∏—è"
                    filtered_movies = [movie for movie in data['results'] 
                                       if 16 not in movie['genre_ids']]  # 16 - —ç—Ç–æ ID –∂–∞–Ω—Ä–∞ "–ê–Ω–∏–º–∞—Ü–∏—è"
                    if filtered_movies:
                        return random.choice(filtered_movies)
                    else:
                        logging.error("No non-animation movies available.")
                        return None
                else:
                    logging.error("No results for movies.")
                    return None
            else:
                logging.error(f"Error getting movie data: {response.status} - {await response.text()}")
                return None

async def get_random_series_from_tmdb():
    page = random.randint(1, 500)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    url = f'https://api.themoviedb.org/3/tv/popular?api_key={API_KEY}&page={page}'
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, proxy=proxy_url) as response:
            if response.status == 200:
                data = await response.json()
                if data['results']:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ –±–µ–∑ –∂–∞–Ω—Ä–∞ "–ê–Ω–∏–º–µ" (—Å–æ–≥–ª–∞—Å–Ω–æ TMDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
                    animation_genre_id = 16  # ID –∂–∞–Ω—Ä–∞ "–ê–Ω–∏–º–∞—Ü–∏—è"
                    filtered_series = [series for series in data['results'] 
                                       if animation_genre_id not in series['genre_ids']]
                    if filtered_series:
                        return random.choice(filtered_series)
                    else:
                        logging.error("No non-anime series available.")
                        return None
                else:
                    logging.error("No results for series.")
                    return None
            else:
                logging.error(f"Error getting series data: {response.status} - {await response.text()}")
                return None
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ
import aiohttp
import logging
import random
from aiogram import types
from aiogram.dispatcher import FSMContext

# Set to keep track of recently sent anime
recently_sent_anime = set()

async def get_random_anime():
    async with aiohttp.ClientSession() as session:
        page = random.randint(1, 100)  # Adjust the upper limit as necessary
        async with session.get(f'https://kitsu.io/api/edge/anime?page[limit]=20&page[offset]={page*20}') as response:
            if response.status == 200:
                data = await response.json()
                if data['data']:
                    anime_list = [anime for anime in data['data'] if anime['attributes']['canonicalTitle'] not in recently_sent_anime]
                    if anime_list:
                        return random.choice(anime_list)
                    else:
                        logging.warning("All anime from the selected page have been recently sent.")
                        return None
                else:
                    logging.error("No anime data found in the response.")
                    return None
            else:
                logging.error(f"Error getting anime data: {response.status} - {await response.text()}")
                return None

@dp.callback_query_handler(lambda c: c.data == 'BUTTON_3', state='*')
async def process_random_anime(callback_query: types.CallbackQuery, state: FSMContext):
    random_anime = await get_random_anime()
    if random_anime:
        try:
            anime_name = random_anime['attributes']['canonicalTitle']
            aired_from = random_anime['attributes'].get('startDate')
            anime_year = aired_from[:4] if aired_from else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            poster_path = random_anime['attributes']['posterImage']['medium']
    
            response_text = f"–ê–Ω–∏–º–µ: {anime_name}\n–ì–æ–¥: {anime_year}"

            if poster_path:
                await bot.send_photo(callback_query.from_user.id, poster_path, caption=response_text, reply_markup=create_back_and_more_keyboard())
            else:
                await bot.send_message(callback_query.from_user.id, response_text, reply_markup=create_back_and_more_keyboard())

            await FilmStates.selected_media_type.set()
            await state.update_data(media_type='anime')

            # Add the anime title to the recently sent set
            recently_sent_anime.add(anime_name)

            # Optionally, clear the cache after a certain number of sent anime
            if len(recently_sent_anime) > 20:  # Adjust the limit as needed
                recently_sent_anime.pop()  # Remove an older entry

        except KeyError as e:
            response_text = f"–û—à–∏–±–∫–∞: –∫–ª—é—á {e} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ."
            await bot.send_message(callback_query.from_user.id, response_text)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ.")

    await bot.answer_callback_query(callback_query.id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart(), state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    if message.chat.type == types.ChatType.PRIVATE:
        try:
            await add_user(user_id=message.from_user.id, user_menotion=message.from_user.id)
        except Exception as e:
            logging.error(f"Error adding user: {e}")

        text_start = await get_text(type='text_text', text_type='wellcome')
        text_start = text_start[0][0]
        
        me = await bot.get_me()
        text_start = text_start.format(
            username_bot=me.mention,
            bot_id=me.id,
            username=message.from_user.mention,
            full_name=message.from_user.full_name,
            user_id=message.from_user.id
        )
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='RANDOM üé≤', callback_data='RANDOM'))
        keyboard.add(InlineKeyboardButton(text='üé• –§–∏–ª—å–º –ø–æ –∫–æ–¥—É', callback_data='filmpokody'))
        await message.answer(text=text_start, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
        await FilmStates.waiting_for_code.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É RANDOM
@dp.callback_query_handler(lambda c: c.data == 'RANDOM', state='*')
async def process_random_button(callback_query: types.CallbackQuery, state: FSMContext):
    data_channel = await get_AllChennel()
    
    for i in data_channel:
        try:
            status = await bot.get_chat_member(chat_id=i[0], user_id=callback_query.from_user.id)
            if status.status == 'left':
                await callback_query.message.answer(
                    '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª(—ã)‚ùå\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüëå',
                    reply_markup=await sub_list()
                )
                await bot.answer_callback_query(callback_query.id)
                return
        except Exception as e:
            logging.error(f"Error checking subscription for channel {i[0]}: {e}")
            await bot.send_message(chat_id=admin_ids, text=f'–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏–ª –Ω–∞—Å. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–æ–≤", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤.\n–ò–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {i[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[1]}\n–°—Å—ã–ª–∫–∞: {i[2]}')
            await bot.answer_callback_query(callback_query.id)
            return

    new_text = "*–ß—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ?*"
    new_keyboard = create_random_combined_keyboard()
    await edit_message_safe(callback_query, new_text, new_keyboard)

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'RESTART', state='*')
async def process_restart_button(callback_query: types.CallbackQuery, state: FSMContext):
    await cmd_start(callback_query, state)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'BACK_TO_SELECTION', state='*')
async def cmd_start(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    text_start = await get_text(type='text_text', text_type='wellcome')
    text_start = text_start[0][0]
        
    me = await bot.get_me()
    user = callback_query.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    if user.is_bot:
        await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É.")
        return

    text_start = text_start.format(
        username_bot=me.mention,
        bot_id=me.id,
        username=user.mention,
        full_name=user.full_name,
        user_id=user.id
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='RANDOM üé≤', callback_data='RANDOM'))
    keyboard.add(InlineKeyboardButton(text='–§–∏–ª—å–º –ø–æ –∫–æ–¥—É', callback_data='filmpokody'))
    
    await bot.send_message(chat_id=user.id, text=text_start, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    await FilmStates.waiting_for_code.set()
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–Ω–æ ‚úÖ"
@dp.callback_query_handler(lambda c: c.data == 'done', state='*')
async def process_done_button(callback_query: types.CallbackQuery, state: FSMContext):
    data_channel = await get_AllChennel()
    
    subscribed = True  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    for i in data_channel:
        try:
            status = await bot.get_chat_member(chat_id=i[0], user_id=callback_query.from_user.id)
            if status.status == 'left':
                subscribed = False
                break
        except Exception as e:
            logging.error(f"Error checking subscription for channel {i[0]}: {e}")
            subscribed = False
            break

    if subscribed:
            restart_keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–†–µ—Å—Ç–∞—Ä—Ç", callback_data='RESTART'))
            await bot.send_message(callback_query.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã! üéâ", reply_markup=restart_keyboard)
    else:
        await callback_query.message.answer(
            '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª(—ã)‚ùå\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüëå',
            reply_markup=await sub_list()
        )

    await bot.answer_callback_query(callback_query.id)
    
    
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    start_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_keyboard.add(types.KeyboardButton("–ö–Ω–æ–ø–∫–∞ 1"))
    start_keyboard.add(types.KeyboardButton("–ö–Ω–æ–ø–∫–∞ 2"))
    await message.answer(start_text, reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'BACK_TO_SELECTIONDSA', state='*')
async def process_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    await start_command(callback_query.message)
    
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'BACK_TO_SELECTION', state='*')
async def cmd_start(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    text_start = await get_text(type='text_text', text_type='wellcome')
    text_start = text_start[0][0]
        
    me = await bot.get_me()
    text_start = text_start.format(
        username_bot=me.mention,
        bot_id=me.id,
        username=callback_query.from_user.mention,
        full_name=callback_query.from_user.full_name,
        user_id=callback_query.from_user.id
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='RANDOM üé≤', callback_data='RANDOM'))
    keyboard.add(InlineKeyboardButton(text='–§–∏–ª—å–º –ø–æ –∫–æ–¥—É', callback_data='filmpokody'))
    
    await bot.send_message(chat_id=callback_query.from_user.id, text=text_start, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
    await FilmStates.waiting_for_code.set()

  

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ù–∞–∑–∞–¥ –∏ –µ—â–µ"
def create_back_and_more_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='–ï—â—ë üé≤', callback_data='MORE'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='BACK_TO_SELECTION'))
    return keyboard
