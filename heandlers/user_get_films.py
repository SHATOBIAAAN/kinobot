from myFilters.user import IsCode
from data.db import get_films, get_AllChennel, get_error_link_complaint_unix, update_error_link_complaint_unix, get_text, add_user
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from time import time
from keybord_s.ohter import ikb_close, ikb_close_oikb
from keybord_s.user import sub_list, kb_films
from datetime import datetime, timedelta
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp, bot
from aiogram.dispatcher.filters import CommandStart
from myFilters.admin import IsAdminM
from keybord_s import admin
from config import admin_ids


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FilmStates(StatesGroup):
    waiting_for_code = State()

@dp.callback_query_handler(text='close_text')
async def cancellation_state(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π cmd_start
        await cmd_start(call.message, state)
    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(CommandStart(), state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    if message.chat.type == types.ChatType.PRIVATE:
        try:
            await add_user(user_id=message.from_user.id, user_menotion=message.from_user.id)
        except Exception as e:
            print(f"Error adding user: {e}")
        
        text_start = await get_text(type='text_text', text_type='wellcome')
        text_start = text_start[0][0]
        
        me = await bot.get_me()
        text_start = str(text_start).replace('{username_bot}', me.mention)
        text_start = str(text_start).replace('{bot_id}', str(me.id))
        text_start = str(text_start).replace('{username}', message.from_user.mention)
        text_start = str(text_start).replace('{full_name}', message.from_user.full_name)
        text_start = str(text_start).replace('{user_id}', str(message.from_user.id))
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text='RANDOM üé≤', callback_data='RANDOM'))
        keyboard.add(InlineKeyboardButton(text='–§–∏–ª—å–º –ø–æ –∫–æ–¥—É', callback_data='filmpokody'))
        
        await message.answer(text=text_start, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)
        await FilmStates.waiting_for_code.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data='filmpokody'
@dp.callback_query_handler(lambda c: c.data == 'filmpokody', state='*')
async def process_filmpokody_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await bot.answer_callback_query(callback_query.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="BACK_TO_SELECTION")
        keyboard = InlineKeyboardMarkup().add(back_button)
        
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await FilmStates.waiting_for_code.set()
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Ñ–∏–ª—å–º–∞
@dp.message_handler(IsCode(), state=FilmStates.waiting_for_code)
async def get_FimsWithCode(message: types.Message, state: FSMContext):
    await message.delete()
    data_chennel = await get_AllChennel()
    for i in data_chennel:
        try:
            status = await bot.get_chat_member(chat_id=i[0], user_id=message.from_user.id)
            if status.status == 'left':
                await message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª(—ã)‚ùå\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—Éüëå', reply_markup=await sub_list())
                return
        except:
            await bot.send_message(chat_id=admin_ids, text=f'–ü–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏–ª –Ω–∞—Å –∑–∞–ø—É—Å—Ç–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–æ–≤"\n–ß—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ–Ω—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤\n–ò–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {i[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {i[1]}\n–°—ã–ª–ª–∫–∞: {i[2]}', reply_markup=ikb_close.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª—ã‚öõÔ∏è', callback_data='check_chennel_admin')))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
    film_data = await get_films(code=message.text)
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    if not film_data:
        keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='filmpokody'))
        await message.answer("–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=keyboard)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
    text_film = await get_text(type='text_text', text_type='film')
    text_film = text_film[0][0]
    me = await bot.get_me()
    text_film = str(text_film).replace('{username_bot}', me.mention)
    text_film = str(text_film).replace('{bot_id}', str(me.id))
    text_film = str(text_film).replace('{username}', message.from_user.mention)
    text_film = str(text_film).replace('{full_name}', message.from_user.full_name)
    text_film = str(text_film).replace('{user_id}', str(message.from_user.id)) 
    text_film = str(text_film).replace('{film_name}', film_data[0][1]) 
    text_film = str(text_film).replace('{film_code}', message.text) 
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    ikb_films = await kb_films(name_films=film_data[0][1])
    ikb_films.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='filmpokody'))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å–º–æ–º
    await bot.send_photo(chat_id=message.from_user.id, photo=film_data[0][2], caption=text_film, reply_markup=ikb_films.row(ikb_close_oikb), parse_mode=types.ParseMode.HTML)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(IsAdminM(), text='/admin')
async def cmd_admin(message: types.Message):
    await message.answer('*–ê–¥–º–∏–Ω –º–µ–Ω—é*', reply_markup=admin.admin_menu_main, parse_mode=types.ParseMode.MARKDOWN)