import sqlite3
from time import time
import random

# connect –∫ db
sql = sqlite3.connect('data/DataBase.db')
cs = sql.cursor()


# —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —é–∑–µ—Ä–æ–≤
cs.execute("""CREATE TABLE IF NOT EXISTS user_data(
    user_id INTEGER PRIMARY KEY,
    user_menotion TEXT,
    user_error_link_complaint_unix INTEGER,
    user_unix INTEGER
)""")

# —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∏–Ω–æ
cs.execute("""CREATE TABLE IF NOT EXISTS films_data(
    films_code TEXT PRIMARY KEY,
    films_name TEXT,
    films_priv TEXT
)""")

# —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
cs.execute("""CREATE TABLE IF NOT EXISTS chennel_data(
    chennel_identifier TEXT PRIMARY KEY,
    chennel_name TEXT,
    chennel_link TEXT
)""")

# —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–µ–µ—Ä–∞—Ö
cs.execute("""CREATE TABLE IF NOT EXISTS player_data(
    player_web TEXT,
    player_name TEXT PRIMARY KEY,
    switch BOOL,
    kb_name TEXT
)""")

# —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
cs.execute("""CREATE TABLE IF NOT EXISTS text_data(
    text_type TEXT PRIMARY KEY,
    text_text TEXT
)""")

sql.commit()

# –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
def insert_data_with_check(table, data):
    try:
        cs.execute(f"INSERT INTO {table} VALUES({','.join(['?']*len(data))})", data)
        sql.commit()
    except sqlite3.IntegrityError:
        pass

# –ü—Ä–∏–º–µ—Ä—ã –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
insert_data_with_check('player_data', ['https://ww5.frkp.lol', 'frkp', True, '–°–º–æ—Ç—Ä–µ—Ç—å #1‚ñ∂Ô∏è'])
insert_data_with_check('player_data', ['www.ggkinopoisk.ru', 'vavada', False, '–°–º–æ—Ç—Ä–µ—Ç—å #2‚ñ∂Ô∏è'])
insert_data_with_check('text_data', ['wellcome', '*–ü—Ä–∏–≤–µ—Ç* [{full_name}](tg://user?id={user_id}) *—Ç—ã –≤ {username_bot} —ç—Ç–æ —Å–∞–º—ã–π –ª—É—á—à–∏–π –±–æ—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º –≤–µ–¥–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏ –º–æ–∂–µ—à—å –¥–∞–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æüòâ*'])
insert_data_with_check('text_data', ['film', 'üë§–û—Ç: {username_bot}\nüé•–ù–∞–∑–≤–∞–Ω–∏–µ: {film_name}'])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
async def only_list(kortage):
    return [i[0] for i in kortage]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
async def add_user(user_id, user_menotion):
    cs.execute("SELECT * FROM user_data WHERE user_id = ?", (user_id,))
    if cs.fetchone() is None:
        data = [user_id, user_menotion, None, time()]
        cs.execute("INSERT INTO user_data VALUES(?, ?, ?, ?)", data)
        sql.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_AllUser(type='*'):
    cs.execute(f"SELECT {type} FROM user_data")
    return cs.fetchall()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞
async def add_film(code, name, priv):
    insert_data_with_check('films_data', [code, name, priv])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤
async def get_AllFilms(type='*'):
    cs.execute(f"SELECT {type} FROM films_data")
    return cs.fetchall()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
async def get_films(code):
    cs.execute(f"SELECT * FROM films_data WHERE films_code = ?", (code,))
    return cs.fetchall()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
async def delete_Film(code):
    cs.execute(f"SELECT films_code FROM films_data WHERE films_code = ?", (code,))
    if cs.fetchone() is None:
        return False 
    cs.execute(f"DELETE FROM films_data WHERE films_code = ?", (code,))
    sql.commit()
    return True

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∞–ª–æ–±—ã –Ω–∞ —Å—Å—ã–ª–∫—É
async def get_error_link_complaint_unix(user_id):
    cs.execute(f"SELECT user_error_link_complaint_unix FROM user_data WHERE user_id = ?", (user_id,))
    return cs.fetchone()[0]

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∞–ª–æ–±—ã –Ω–∞ —Å—Å—ã–ª–∫—É
async def update_error_link_complaint_unix(user_id, time_ub):
    cs.execute(f"UPDATE user_data SET user_error_link_complaint_unix = ? WHERE user_id = ?", (time_ub, user_id))
    sql.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
async def add_Chennel(chennel_identifier, name, link):
    insert_data_with_check('chennel_data', [chennel_identifier, name, link])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
async def get_AllChennel(type='*'):
    cs.execute(f"SELECT {type} FROM chennel_data")
    return cs.fetchall()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
async def update_nameChennel(chennel_identifier, name):
    cs.execute(f"UPDATE chennel_data SET chennel_name = ? WHERE chennel_identifier = ?", (name, chennel_identifier))
    sql.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
async def delete_Chennel(chennel_identifier):
    cs.execute(f"SELECT * FROM chennel_data WHERE chennel_identifier = ?", (chennel_identifier,))
    if cs.fetchone() is None:
        return False 
    cs.execute(f"DELETE FROM chennel_data WHERE chennel_identifier = ?", (chennel_identifier,))
    sql.commit()
    return True

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–µ–µ—Ä–æ–≤
async def get_Allplayer(type='*'):
    cs.execute(f"SELECT {type} FROM player_data")
    return cs.fetchall()

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–µ—Ä–∞
async def swich_player(player_name):
    cs.execute(f"SELECT switch FROM player_data WHERE player_name = ?", (player_name,))
    data_swich = cs.fetchone()[0]
    edit = not data_swich
    cs.execute(f"UPDATE player_data SET switch = ? WHERE player_name = ?", (edit, player_name))
    sql.commit()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–ª–µ–µ—Ä–∞
async def update_kbname_player(player_name, kb):
    cs.execute(f"UPDATE player_data SET kb_name = ? WHERE player_name = ?", (kb, player_name))
    sql.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–∏–ø—É
async def get_text(type, text_type):
    cs.execute(f"SELECT {type} FROM text_data WHERE text_type = ?", (text_type,))
    return cs.fetchall()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
async def update_wellcome_text(text, text_type):
    cs.execute(f"UPDATE text_data SET text_text = ? WHERE text_type = ?", (text, text_type))
    sql.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
async def get_random_film():
    cs.execute("SELECT films_code, films_name FROM films_data")
    films = cs.fetchall()
    return random.choice(films) if films else None
